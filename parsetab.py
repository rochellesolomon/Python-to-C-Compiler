
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'stm_list_or_emptyleftANDleftEQOPNEQleftLESSLESSEQGREATERGREATEREQleftPLUSMINUSleftTIMESDIVIDEMODAND ARROW BOOLEAN COLON COMMA DECIMAL DEF DIVIDE ELIF ELSE EQ EQOP FALSE GREATER GREATEREQ ID IF INT INTDIVIDE LBRACK LCBRACK LESS LESSEQ LIST LPAREN MINUS MOD NEQ NOT OR PERIOD PLUS QUOTATION RBRACK RCBRACK RETURN RPAREN SEMICO STR STRING TIMES TRUE WHILE\n        stm_list_or_empty : stm_list\n                          | empty\n        \n        stm_list : stm_list stm\n                     | stm\n        \n        stm : func_decl\n            | if_stm\n            | while_stm\n            | decl_stm SEMICO\n            | assign_stm SEMICO\n            | ret_stm SEMICO\n            | expr SEMICO\n            | SEMICO\n        \n        decl_stm : ID COLON type\n        \n        assign_stm : ID EQ expr\n        \n        if_stm : IF expr COLON body else_block_or_empty\n                    | IF expr COLON body elif_block\n        \n        elif_block : ELIF expr COLON body else_block_or_empty\n                       | ELIF expr COLON body elif_block\n        \n        else_block_or_empty : else_block\n                                | empty\n        \n        else_block : ELSE COLON body\n        \n        while_stm : WHILE expr COLON body\n        \n        ret_stm : RETURN expr\n        \n        expr : LPAREN expr RPAREN\n        \n        expr : expr PLUS expr\n             | expr MINUS expr \n             | expr TIMES expr\n             | expr INTDIVIDE expr\n             | expr DIVIDE expr\n             | expr MOD expr\n             | expr LESS expr\n             | expr LESSEQ expr\n             | expr GREATER expr\n             | expr GREATEREQ expr\n             | expr EQOP expr\n             | expr NEQ expr\n             | expr AND expr\n             | expr OR expr\n        \n        expr : NOT expr\n             | MINUS expr\n        \n        expr : ID LPAREN expr_list_or_empty RPAREN\n        \n        expr : DECIMAL\n        \n        expr : TRUE \n             | FALSE\n        \n        expr : STRING\n        \n        string_or_empty : STRING\n                        | empty\n        \n        expr : list\n        \n        expr : ID\n        \n        list : LBRACK expr_list_or_empty RBRACK\n        \n        expr : type LPAREN expr LBRACK expr RBRACK RPAREN\n        \n        expr : expr LBRACK slice RBRACK\n             | expr LBRACK slice_with_step RBRACK\n        \n        slice : slice_index_or_none COLON slice_index_or_none\n        \n        slice_with_step : slice COLON slice_index_or_none\n        \n        slice_index_or_none : expr\n                            | empty\n        \n        expr_list_or_empty : expr_list \n                           | empty\n        \n        expr_list : expr_list COMMA expr \n                  | expr\n        \n        func_decl : DEF ID LPAREN func_params_or_empty RPAREN ARROW type COLON body\n        \n        func_params_or_empty : func_params\n                             | empty\n        \n        func_params : func_params COMMA param\n                    | param\n        \n        param : ID COLON type\n        \n        body : LCBRACK stm_list_or_empty RCBRACK\n        \n        type : BOOLEAN\n             | INT\n             | LIST\n             | STR\n        \n        empty :\n        '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,9,32,33,34,35,36,108,110,118,119,120,121,131,135,137,138,139,140,],[-73,0,-1,-2,-4,-5,-6,-7,-12,-3,-8,-9,-10,-11,-73,-22,-15,-16,-19,-20,-68,-21,-73,-62,-17,-18,]),'SEMICO':([0,2,4,5,6,7,8,9,10,11,12,14,22,23,24,25,26,28,29,30,31,32,33,34,35,36,57,61,62,63,68,69,70,71,72,73,74,75,76,77,78,79,80,81,88,89,91,95,97,99,106,108,109,110,118,119,120,121,131,133,135,137,138,139,140,],[9,9,-4,-5,-6,-7,33,-12,34,35,36,-49,-42,-43,-44,-45,-48,-69,-70,-71,-72,-3,-8,-9,-10,-11,-49,-23,-40,-39,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-13,-14,-24,-50,-52,-53,-41,-73,9,-22,-15,-16,-19,-20,-68,-51,-21,-73,-62,-17,-18,]),'DEF':([0,2,4,5,6,7,9,32,33,34,35,36,108,109,110,118,119,120,121,131,135,137,138,139,140,],[13,13,-4,-5,-6,-7,-12,-3,-8,-9,-10,-11,-73,13,-22,-15,-16,-19,-20,-68,-21,-73,-62,-17,-18,]),'IF':([0,2,4,5,6,7,9,32,33,34,35,36,108,109,110,118,119,120,121,131,135,137,138,139,140,],[17,17,-4,-5,-6,-7,-12,-3,-8,-9,-10,-11,-73,17,-22,-15,-16,-19,-20,-68,-21,-73,-62,-17,-18,]),'WHILE':([0,2,4,5,6,7,9,32,33,34,35,36,108,109,110,118,119,120,121,131,135,137,138,139,140,],[18,18,-4,-5,-6,-7,-12,-3,-8,-9,-10,-11,-73,18,-22,-15,-16,-19,-20,-68,-21,-73,-62,-17,-18,]),'ID':([0,2,4,5,6,7,9,13,15,17,18,19,20,21,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,58,87,96,98,100,107,108,109,110,116,118,119,120,121,122,131,135,137,138,139,140,],[14,14,-4,-5,-6,-7,-12,52,57,57,57,57,57,57,57,-3,-8,-9,-10,-11,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,101,57,57,57,57,-73,14,-22,101,-15,-16,-19,-20,57,-68,-21,-73,-62,-17,-18,]),'RETURN':([0,2,4,5,6,7,9,32,33,34,35,36,108,109,110,118,119,120,121,131,135,137,138,139,140,],[19,19,-4,-5,-6,-7,-12,-3,-8,-9,-10,-11,-73,19,-22,-15,-16,-19,-20,-68,-21,-73,-62,-17,-18,]),'LPAREN':([0,2,4,5,6,7,9,14,15,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,57,58,96,98,100,107,108,109,110,118,119,120,121,122,131,135,137,138,139,140,],[15,15,-4,-5,-6,-7,-12,55,15,58,15,15,15,15,15,15,-69,-70,-71,-72,-3,-8,-9,-10,-11,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,87,15,15,55,15,15,15,15,15,-73,15,-22,-15,-16,-19,-20,15,-68,-21,-73,-62,-17,-18,]),'NOT':([0,2,4,5,6,7,9,15,17,18,19,20,21,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,58,96,98,100,107,108,109,110,118,119,120,121,122,131,135,137,138,139,140,],[21,21,-4,-5,-6,-7,-12,21,21,21,21,21,21,21,-3,-8,-9,-10,-11,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-73,21,-22,-15,-16,-19,-20,21,-68,-21,-73,-62,-17,-18,]),'MINUS':([0,2,4,5,6,7,9,12,14,15,17,18,19,20,21,22,23,24,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,96,97,98,99,100,106,107,108,109,110,111,117,118,119,120,121,122,129,131,133,135,137,138,139,140,],[20,20,-4,-5,-6,-7,-12,38,-49,20,20,20,20,20,20,-42,-43,-44,-45,-48,20,-3,-8,-9,-10,-11,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,38,-49,20,38,38,38,-40,38,38,-25,-26,-27,38,-29,-30,38,38,38,38,38,38,38,38,38,38,-24,38,-50,20,-52,20,-53,20,-41,20,-73,20,-22,38,38,-15,-16,-19,-20,20,38,-68,-51,-21,-73,-62,-17,-18,]),'DECIMAL':([0,2,4,5,6,7,9,15,17,18,19,20,21,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,58,96,98,100,107,108,109,110,118,119,120,121,122,131,135,137,138,139,140,],[22,22,-4,-5,-6,-7,-12,22,22,22,22,22,22,22,-3,-8,-9,-10,-11,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-73,22,-22,-15,-16,-19,-20,22,-68,-21,-73,-62,-17,-18,]),'TRUE':([0,2,4,5,6,7,9,15,17,18,19,20,21,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,58,96,98,100,107,108,109,110,118,119,120,121,122,131,135,137,138,139,140,],[23,23,-4,-5,-6,-7,-12,23,23,23,23,23,23,23,-3,-8,-9,-10,-11,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-73,23,-22,-15,-16,-19,-20,23,-68,-21,-73,-62,-17,-18,]),'FALSE':([0,2,4,5,6,7,9,15,17,18,19,20,21,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,58,96,98,100,107,108,109,110,118,119,120,121,122,131,135,137,138,139,140,],[24,24,-4,-5,-6,-7,-12,24,24,24,24,24,24,24,-3,-8,-9,-10,-11,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-73,24,-22,-15,-16,-19,-20,24,-68,-21,-73,-62,-17,-18,]),'STRING':([0,2,4,5,6,7,9,15,17,18,19,20,21,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,58,96,98,100,107,108,109,110,118,119,120,121,122,131,135,137,138,139,140,],[25,25,-4,-5,-6,-7,-12,25,25,25,25,25,25,25,-3,-8,-9,-10,-11,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-73,25,-22,-15,-16,-19,-20,25,-68,-21,-73,-62,-17,-18,]),'LBRACK':([0,2,4,5,6,7,9,12,14,15,17,18,19,20,21,22,23,24,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,96,97,98,99,100,106,107,108,109,110,111,117,118,119,120,121,122,129,131,133,135,137,138,139,140,],[27,27,-4,-5,-6,-7,-12,51,-49,27,27,27,27,27,27,-42,-43,-44,-45,-48,27,-3,-8,-9,-10,-11,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,51,-49,27,51,51,51,-40,51,51,-25,-26,-27,51,-29,-30,-31,-32,-33,-34,-35,-36,-37,51,51,51,-24,107,-50,27,-52,27,-53,27,-41,27,-73,27,-22,51,51,-15,-16,-19,-20,27,51,-68,-51,-21,-73,-62,-17,-18,]),'BOOLEAN':([0,2,4,5,6,7,9,15,17,18,19,20,21,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,58,96,98,100,107,108,109,110,114,118,119,120,121,122,126,131,135,137,138,139,140,],[28,28,-4,-5,-6,-7,-12,28,28,28,28,28,28,28,-3,-8,-9,-10,-11,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-73,28,-22,28,-15,-16,-19,-20,28,28,-68,-21,-73,-62,-17,-18,]),'INT':([0,2,4,5,6,7,9,15,17,18,19,20,21,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,58,96,98,100,107,108,109,110,114,118,119,120,121,122,126,131,135,137,138,139,140,],[29,29,-4,-5,-6,-7,-12,29,29,29,29,29,29,29,-3,-8,-9,-10,-11,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-73,29,-22,29,-15,-16,-19,-20,29,29,-68,-21,-73,-62,-17,-18,]),'LIST':([0,2,4,5,6,7,9,15,17,18,19,20,21,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,58,96,98,100,107,108,109,110,114,118,119,120,121,122,126,131,135,137,138,139,140,],[30,30,-4,-5,-6,-7,-12,30,30,30,30,30,30,30,-3,-8,-9,-10,-11,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-73,30,-22,30,-15,-16,-19,-20,30,30,-68,-21,-73,-62,-17,-18,]),'STR':([0,2,4,5,6,7,9,15,17,18,19,20,21,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,58,96,98,100,107,108,109,110,114,118,119,120,121,122,126,131,135,137,138,139,140,],[31,31,-4,-5,-6,-7,-12,31,31,31,31,31,31,31,-3,-8,-9,-10,-11,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-73,31,-22,31,-15,-16,-19,-20,31,31,-68,-21,-73,-62,-17,-18,]),'RCBRACK':([2,3,4,5,6,7,9,32,33,34,35,36,108,109,110,118,119,120,121,124,131,135,137,138,139,140,],[-1,-2,-4,-5,-6,-7,-12,-3,-8,-9,-10,-11,-73,-73,-22,-15,-16,-19,-20,131,-68,-21,-73,-62,-17,-18,]),'PLUS':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[37,-49,-42,-43,-44,-45,-48,37,-49,37,37,37,-40,37,37,-25,-26,-27,37,-29,-30,37,37,37,37,37,37,37,37,37,37,-24,37,-50,-52,-53,-41,37,37,37,-51,]),'TIMES':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[39,-49,-42,-43,-44,-45,-48,39,-49,39,39,39,39,39,39,39,39,-27,39,-29,-30,39,39,39,39,39,39,39,39,39,39,-24,39,-50,-52,-53,-41,39,39,39,-51,]),'INTDIVIDE':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[40,-49,-42,-43,-44,-45,-48,40,-49,40,40,40,-40,40,40,-25,-26,-27,40,-29,-30,-31,-32,-33,-34,-35,-36,-37,40,40,40,-24,40,-50,-52,-53,-41,40,40,40,-51,]),'DIVIDE':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[41,-49,-42,-43,-44,-45,-48,41,-49,41,41,41,41,41,41,41,41,-27,41,-29,-30,41,41,41,41,41,41,41,41,41,41,-24,41,-50,-52,-53,-41,41,41,41,-51,]),'MOD':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[42,-49,-42,-43,-44,-45,-48,42,-49,42,42,42,42,42,42,42,42,-27,42,-29,-30,42,42,42,42,42,42,42,42,42,42,-24,42,-50,-52,-53,-41,42,42,42,-51,]),'LESS':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[43,-49,-42,-43,-44,-45,-48,43,-49,43,43,43,-40,43,43,-25,-26,-27,43,-29,-30,-31,-32,-33,-34,43,43,43,43,43,43,-24,43,-50,-52,-53,-41,43,43,43,-51,]),'LESSEQ':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[44,-49,-42,-43,-44,-45,-48,44,-49,44,44,44,-40,44,44,-25,-26,-27,44,-29,-30,-31,-32,-33,-34,44,44,44,44,44,44,-24,44,-50,-52,-53,-41,44,44,44,-51,]),'GREATER':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[45,-49,-42,-43,-44,-45,-48,45,-49,45,45,45,-40,45,45,-25,-26,-27,45,-29,-30,-31,-32,-33,-34,45,45,45,45,45,45,-24,45,-50,-52,-53,-41,45,45,45,-51,]),'GREATEREQ':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[46,-49,-42,-43,-44,-45,-48,46,-49,46,46,46,-40,46,46,-25,-26,-27,46,-29,-30,-31,-32,-33,-34,46,46,46,46,46,46,-24,46,-50,-52,-53,-41,46,46,46,-51,]),'EQOP':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[47,-49,-42,-43,-44,-45,-48,47,-49,47,47,47,-40,47,47,-25,-26,-27,47,-29,-30,-31,-32,-33,-34,-35,-36,47,47,47,47,-24,47,-50,-52,-53,-41,47,47,47,-51,]),'NEQ':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[48,-49,-42,-43,-44,-45,-48,48,-49,48,48,48,-40,48,48,-25,-26,-27,48,-29,-30,-31,-32,-33,-34,-35,-36,48,48,48,48,-24,48,-50,-52,-53,-41,48,48,48,-51,]),'AND':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[49,-49,-42,-43,-44,-45,-48,49,-49,49,49,49,-40,49,49,-25,-26,-27,49,-29,-30,-31,-32,-33,-34,-35,-36,-37,49,49,49,-24,49,-50,-52,-53,-41,49,49,49,-51,]),'OR':([12,14,22,23,24,25,26,56,57,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,91,92,95,97,99,106,111,117,129,133,],[50,-49,-42,-43,-44,-45,-48,50,-49,50,50,50,-40,50,50,-25,-26,-27,50,-29,-30,-31,-32,-33,-34,-35,-36,-37,50,50,50,-24,50,-50,-52,-53,-41,50,50,50,-51,]),'COLON':([14,22,23,24,25,26,28,29,30,31,51,57,59,60,62,63,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,91,95,97,99,100,101,106,107,113,117,123,129,132,133,],[53,-42,-43,-44,-45,-48,-69,-70,-71,-72,-73,-49,93,94,-40,-39,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-56,98,100,-57,-24,-50,-52,-53,-73,114,-41,-73,-54,-56,130,134,136,-51,]),'EQ':([14,],[54,]),'RPAREN':([22,23,24,25,26,28,29,30,31,55,56,57,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,90,91,95,97,99,102,103,104,105,106,111,125,127,128,133,],[-42,-43,-44,-45,-48,-69,-70,-71,-72,-73,91,-49,-40,-39,-58,-59,-61,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-73,106,-24,-50,-52,-53,115,-63,-64,-66,-41,-60,-67,-65,133,-51,]),'COMMA':([22,23,24,25,26,28,29,30,31,57,62,63,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,91,95,97,99,103,105,106,111,125,127,133,],[-42,-43,-44,-45,-48,-69,-70,-71,-72,-49,-40,-39,96,-61,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-24,-50,-52,-53,116,-66,-41,-60,-67,-65,-51,]),'RBRACK':([22,23,24,25,26,27,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,91,95,97,98,99,100,106,111,112,113,117,133,],[-42,-43,-44,-45,-48,-73,-49,-40,-39,95,-58,-59,-61,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-56,97,99,-57,-24,-50,-52,-73,-53,-73,-41,-60,-55,-54,128,-51,]),'LCBRACK':([93,94,130,134,136,],[109,109,109,109,109,]),'ELIF':([108,131,137,],[122,-68,122,]),'ELSE':([108,131,137,],[123,-68,123,]),'ARROW':([115,],[126,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stm_list_or_empty':([0,109,],[1,124,]),'stm_list':([0,109,],[2,2,]),'empty':([0,27,51,55,87,98,100,107,108,109,137,],[3,66,86,66,104,86,86,86,121,3,121,]),'stm':([0,2,109,],[4,32,4,]),'func_decl':([0,2,109,],[5,5,5,]),'if_stm':([0,2,109,],[6,6,6,]),'while_stm':([0,2,109,],[7,7,7,]),'decl_stm':([0,2,109,],[8,8,8,]),'assign_stm':([0,2,109,],[10,10,10,]),'ret_stm':([0,2,109,],[11,11,11,]),'expr':([0,2,15,17,18,19,20,21,27,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,58,96,98,100,107,109,122,],[12,12,56,59,60,61,62,63,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,89,67,92,111,82,82,117,12,129,]),'type':([0,2,15,17,18,19,20,21,27,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,58,96,98,100,107,109,114,122,126,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,88,16,16,16,16,16,16,16,16,125,16,132,]),'list':([0,2,15,17,18,19,20,21,27,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,58,96,98,100,107,109,122,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'expr_list_or_empty':([27,55,],[64,90,]),'expr_list':([27,55,],[65,65,]),'slice':([51,107,],[83,83,]),'slice_with_step':([51,107,],[84,84,]),'slice_index_or_none':([51,98,100,107,],[85,112,113,85,]),'func_params_or_empty':([87,],[102,]),'func_params':([87,],[103,]),'param':([87,116,],[105,127,]),'body':([93,94,130,134,136,],[108,110,135,137,138,]),'else_block_or_empty':([108,137,],[118,139,]),'elif_block':([108,137,],[119,140,]),'else_block':([108,137,],[120,120,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stm_list_or_empty","S'",1,None,None,None),
  ('stm_list_or_empty -> stm_list','stm_list_or_empty',1,'p_stm_list_or_empty','pythonParser.py',34),
  ('stm_list_or_empty -> empty','stm_list_or_empty',1,'p_stm_list_or_empty','pythonParser.py',35),
  ('stm_list -> stm_list stm','stm_list',2,'p_stm_list','pythonParser.py',41),
  ('stm_list -> stm','stm_list',1,'p_stm_list','pythonParser.py',42),
  ('stm -> func_decl','stm',1,'p_stm','pythonParser.py',51),
  ('stm -> if_stm','stm',1,'p_stm','pythonParser.py',52),
  ('stm -> while_stm','stm',1,'p_stm','pythonParser.py',53),
  ('stm -> decl_stm SEMICO','stm',2,'p_stm','pythonParser.py',54),
  ('stm -> assign_stm SEMICO','stm',2,'p_stm','pythonParser.py',55),
  ('stm -> ret_stm SEMICO','stm',2,'p_stm','pythonParser.py',56),
  ('stm -> expr SEMICO','stm',2,'p_stm','pythonParser.py',57),
  ('stm -> SEMICO','stm',1,'p_stm','pythonParser.py',58),
  ('decl_stm -> ID COLON type','decl_stm',3,'p_decl_stm','pythonParser.py',64),
  ('assign_stm -> ID EQ expr','assign_stm',3,'p_assign_stm','pythonParser.py',70),
  ('if_stm -> IF expr COLON body else_block_or_empty','if_stm',5,'p_if_stm','pythonParser.py',76),
  ('if_stm -> IF expr COLON body elif_block','if_stm',5,'p_if_stm','pythonParser.py',77),
  ('elif_block -> ELIF expr COLON body else_block_or_empty','elif_block',5,'p_elif_block','pythonParser.py',83),
  ('elif_block -> ELIF expr COLON body elif_block','elif_block',5,'p_elif_block','pythonParser.py',84),
  ('else_block_or_empty -> else_block','else_block_or_empty',1,'p_else_block_or_empty','pythonParser.py',90),
  ('else_block_or_empty -> empty','else_block_or_empty',1,'p_else_block_or_empty','pythonParser.py',91),
  ('else_block -> ELSE COLON body','else_block',3,'p_else_block','pythonParser.py',97),
  ('while_stm -> WHILE expr COLON body','while_stm',4,'p_while_stm','pythonParser.py',103),
  ('ret_stm -> RETURN expr','ret_stm',2,'p_return_stm','pythonParser.py',109),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_brackets_expr','pythonParser.py',115),
  ('expr -> expr PLUS expr','expr',3,'p_binary_ops','pythonParser.py',121),
  ('expr -> expr MINUS expr','expr',3,'p_binary_ops','pythonParser.py',122),
  ('expr -> expr TIMES expr','expr',3,'p_binary_ops','pythonParser.py',123),
  ('expr -> expr INTDIVIDE expr','expr',3,'p_binary_ops','pythonParser.py',124),
  ('expr -> expr DIVIDE expr','expr',3,'p_binary_ops','pythonParser.py',125),
  ('expr -> expr MOD expr','expr',3,'p_binary_ops','pythonParser.py',126),
  ('expr -> expr LESS expr','expr',3,'p_binary_ops','pythonParser.py',127),
  ('expr -> expr LESSEQ expr','expr',3,'p_binary_ops','pythonParser.py',128),
  ('expr -> expr GREATER expr','expr',3,'p_binary_ops','pythonParser.py',129),
  ('expr -> expr GREATEREQ expr','expr',3,'p_binary_ops','pythonParser.py',130),
  ('expr -> expr EQOP expr','expr',3,'p_binary_ops','pythonParser.py',131),
  ('expr -> expr NEQ expr','expr',3,'p_binary_ops','pythonParser.py',132),
  ('expr -> expr AND expr','expr',3,'p_binary_ops','pythonParser.py',133),
  ('expr -> expr OR expr','expr',3,'p_binary_ops','pythonParser.py',134),
  ('expr -> NOT expr','expr',2,'p_unary_ops','pythonParser.py',140),
  ('expr -> MINUS expr','expr',2,'p_unary_ops','pythonParser.py',141),
  ('expr -> ID LPAREN expr_list_or_empty RPAREN','expr',4,'p_func_call','pythonParser.py',147),
  ('expr -> DECIMAL','expr',1,'p_number','pythonParser.py',153),
  ('expr -> TRUE','expr',1,'p_boolean','pythonParser.py',159),
  ('expr -> FALSE','expr',1,'p_boolean','pythonParser.py',160),
  ('expr -> STRING','expr',1,'p_string','pythonParser.py',166),
  ('string_or_empty -> STRING','string_or_empty',1,'p_string_or_empty','pythonParser.py',172),
  ('string_or_empty -> empty','string_or_empty',1,'p_string_or_empty','pythonParser.py',173),
  ('expr -> list','expr',1,'p_list_expr','pythonParser.py',182),
  ('expr -> ID','expr',1,'p_id_expr','pythonParser.py',188),
  ('list -> LBRACK expr_list_or_empty RBRACK','list',3,'p_list','pythonParser.py',194),
  ('expr -> type LPAREN expr LBRACK expr RBRACK RPAREN','expr',7,'p_list_index','pythonParser.py',200),
  ('expr -> expr LBRACK slice RBRACK','expr',4,'p_slice_expression','pythonParser.py',206),
  ('expr -> expr LBRACK slice_with_step RBRACK','expr',4,'p_slice_expression','pythonParser.py',207),
  ('slice -> slice_index_or_none COLON slice_index_or_none','slice',3,'p_slice','pythonParser.py',213),
  ('slice_with_step -> slice COLON slice_index_or_none','slice_with_step',3,'p_slice_with_step','pythonParser.py',219),
  ('slice_index_or_none -> expr','slice_index_or_none',1,'p_slice_index_or_none','pythonParser.py',225),
  ('slice_index_or_none -> empty','slice_index_or_none',1,'p_slice_index_or_none','pythonParser.py',226),
  ('expr_list_or_empty -> expr_list','expr_list_or_empty',1,'p_expr_list_or_empty','pythonParser.py',232),
  ('expr_list_or_empty -> empty','expr_list_or_empty',1,'p_expr_list_or_empty','pythonParser.py',233),
  ('expr_list -> expr_list COMMA expr','expr_list',3,'p_expr_list','pythonParser.py',239),
  ('expr_list -> expr','expr_list',1,'p_expr_list','pythonParser.py',240),
  ('func_decl -> DEF ID LPAREN func_params_or_empty RPAREN ARROW type COLON body','func_decl',9,'p_func_decl','pythonParser.py',249),
  ('func_params_or_empty -> func_params','func_params_or_empty',1,'p_func_params_or_empty','pythonParser.py',255),
  ('func_params_or_empty -> empty','func_params_or_empty',1,'p_func_params_or_empty','pythonParser.py',256),
  ('func_params -> func_params COMMA param','func_params',3,'p_func_params','pythonParser.py',262),
  ('func_params -> param','func_params',1,'p_func_params','pythonParser.py',263),
  ('param -> ID COLON type','param',3,'p_func_param','pythonParser.py',272),
  ('body -> LCBRACK stm_list_or_empty RCBRACK','body',3,'p_body','pythonParser.py',278),
  ('type -> BOOLEAN','type',1,'p_type','pythonParser.py',284),
  ('type -> INT','type',1,'p_type','pythonParser.py',285),
  ('type -> LIST','type',1,'p_type','pythonParser.py',286),
  ('type -> STR','type',1,'p_type','pythonParser.py',287),
  ('empty -> <empty>','empty',0,'p_empty','pythonParser.py',293),
]
